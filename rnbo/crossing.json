{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "lookahead",
        "paramId": "p_obj-130/lookahead",
        "minimum": 0,
        "maximum": 2,
        "exponent": 1,
        "steps": 3,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "0",
          "1",
          "10"
        ],
        "displayName": "Lookahead",
        "unit": "ms",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "volume",
        "paramId": "p_obj-130/volume",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Volume",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "comp",
        "paramId": "p_obj-130/comp",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 25,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "softclip",
        "paramId": "p_obj-130/softclip",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "",
        "unit": "On/Off",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "attack",
        "paramId": "p_obj-130/attack",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 25,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Attack",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "sustain",
        "paramId": "p_obj-130/sustain",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 25,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Sustain",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "decay",
        "paramId": "p_obj-8/decay",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Decay",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "mix",
        "paramId": "p_obj-8/mix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mix",
        "unit": "%",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "jitter",
        "paramId": "p_obj-8/jitter",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Jitter",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "damp",
        "paramId": "p_obj-8/damp",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Damp",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "size",
        "paramId": "p_obj-8/size",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Size",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "diff",
        "paramId": "p_obj-8/diff",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Diff",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 12,
        "name": "freq",
        "paramId": "p_obj-32/freq",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 30,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Freq",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 13,
        "name": "spread",
        "paramId": "p_obj-32/spread",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Spread",
        "unit": "On/Off",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 14,
        "name": "mode",
        "paramId": "p_obj-32/mode",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "RM",
          "AM"
        ],
        "displayName": "Mode",
        "unit": "",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "AM",
        "paramId": "p_obj-17/AM",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "AM",
        "unit": "%",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "mix",
        "paramId": "p_obj-17/mix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "Mix",
        "order": 7,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 17,
        "name": "drive",
        "paramId": "p_obj-17/drive",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 25,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Drive",
        "unit": "%",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 18,
        "name": "tone",
        "paramId": "p_obj-17/tone",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Tone",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 19,
        "name": "rectified",
        "paramId": "p_obj-17/rectified",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Rectified",
        "unit": "%",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 20,
        "name": "octave2",
        "paramId": "p_obj-17/octave2",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Octave2",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 21,
        "name": "octave1",
        "paramId": "p_obj-17/octave1",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 100,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Octave1",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 22,
        "name": "input",
        "paramId": "p_obj-371/p_obj-323/input",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Input",
        "unit": "On/Off",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 23,
        "name": "time",
        "paramId": "p_obj-371/p_obj-323/time",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Time",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 24,
        "name": "scale",
        "paramId": "p_obj-371/p_obj-323/scale",
        "minimum": 0,
        "maximum": 6,
        "exponent": 1,
        "steps": 7,
        "initialValue": 3,
        "isEnum": true,
        "enumValues": [
          "1/4",
          "1/2",
          "3/4",
          "x1",
          "3/2",
          "x2",
          "x4"
        ],
        "displayName": "Scale",
        "unit": "Ratio",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 25,
        "name": "color",
        "paramId": "p_obj-371/p_obj-323/color",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Color",
        "unit": "%",
        "order": 7,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 26,
        "name": "volume",
        "paramId": "p_obj-371/p_obj-323/volume",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Volume",
        "unit": "%",
        "order": 9,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 27,
        "name": "mix",
        "paramId": "p_obj-371/p_obj-323/mix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mix",
        "unit": "%",
        "order": 10,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 28,
        "name": "spread",
        "paramId": "p_obj-371/p_obj-323/spread",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Spread",
        "unit": "%",
        "order": 8,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 29,
        "name": "filter",
        "paramId": "p_obj-371/p_obj-323/filter",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "None",
          "LP",
          "HP",
          "BP",
          "Notch"
        ],
        "displayName": "Filter",
        "unit": "Type",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 30,
        "name": "regen",
        "paramId": "p_obj-371/p_obj-323/regen",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Regen",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 31,
        "name": "fb",
        "paramId": "p_obj-371/p_obj-323/fb",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Feedback",
        "unit": "On/Off",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 32,
        "name": "freq",
        "paramId": "p_obj-371/p_obj-193/freq",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 30,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Freq",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 33,
        "name": "spread",
        "paramId": "p_obj-371/p_obj-193/spread",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Spread",
        "unit": "On/Off",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 34,
        "name": "mode",
        "paramId": "p_obj-371/p_obj-193/mode",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "RM",
          "AM"
        ],
        "displayName": "Mode",
        "unit": "",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 35,
        "name": "input",
        "paramId": "p_obj-371/p_obj-321/input",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Input",
        "unit": "On/Off",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 36,
        "name": "time",
        "paramId": "p_obj-371/p_obj-321/time",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Time",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 37,
        "name": "scale",
        "paramId": "p_obj-371/p_obj-321/scale",
        "minimum": 0,
        "maximum": 6,
        "exponent": 1,
        "steps": 7,
        "initialValue": 3,
        "isEnum": true,
        "enumValues": [
          "1/4",
          "1/2",
          "3/4",
          "x1",
          "3/2",
          "x2",
          "x4"
        ],
        "displayName": "Scale",
        "unit": "Ratio",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 38,
        "name": "color",
        "paramId": "p_obj-371/p_obj-321/color",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Color",
        "unit": "%",
        "order": 7,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 39,
        "name": "volume",
        "paramId": "p_obj-371/p_obj-321/volume",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Volume",
        "unit": "%",
        "order": 9,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 40,
        "name": "mix",
        "paramId": "p_obj-371/p_obj-321/mix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mix",
        "unit": "%",
        "order": 10,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 41,
        "name": "spread",
        "paramId": "p_obj-371/p_obj-321/spread",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Spread",
        "unit": "%",
        "order": 8,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 42,
        "name": "filter",
        "paramId": "p_obj-371/p_obj-321/filter",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "None",
          "LP",
          "HP",
          "BP",
          "Notch"
        ],
        "displayName": "Filter",
        "unit": "Type",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 43,
        "name": "regen",
        "paramId": "p_obj-371/p_obj-321/regen",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Regen",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 44,
        "name": "fb",
        "paramId": "p_obj-371/p_obj-321/fb",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Feedback",
        "unit": "On/Off",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 45,
        "name": "freq",
        "paramId": "p_obj-371/p_obj-192/freq",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 30,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Freq",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 46,
        "name": "spread",
        "paramId": "p_obj-371/p_obj-192/spread",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Spread",
        "unit": "On/Off",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 47,
        "name": "mode",
        "paramId": "p_obj-371/p_obj-192/mode",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "RM",
          "AM"
        ],
        "displayName": "Mode",
        "unit": "",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 48,
        "name": "input",
        "paramId": "p_obj-371/p_obj-324/input",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Input",
        "unit": "On/Off",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 49,
        "name": "time",
        "paramId": "p_obj-371/p_obj-324/time",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Time",
        "unit": "%",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 50,
        "name": "scale",
        "paramId": "p_obj-371/p_obj-324/scale",
        "minimum": 0,
        "maximum": 6,
        "exponent": 1,
        "steps": 7,
        "initialValue": 3,
        "isEnum": true,
        "enumValues": [
          "1/4",
          "1/2",
          "3/4",
          "x1",
          "3/2",
          "x2",
          "x4"
        ],
        "displayName": "Scale",
        "unit": "Ratio",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 51,
        "name": "color",
        "paramId": "p_obj-371/p_obj-324/color",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Color",
        "unit": "%",
        "order": 7,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 52,
        "name": "volume",
        "paramId": "p_obj-371/p_obj-324/volume",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Volume",
        "unit": "%",
        "order": 9,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 53,
        "name": "mix",
        "paramId": "p_obj-371/p_obj-324/mix",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Mix",
        "unit": "%",
        "order": 10,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 54,
        "name": "spread",
        "paramId": "p_obj-371/p_obj-324/spread",
        "minimum": -100,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Spread",
        "unit": "%",
        "order": 8,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 55,
        "name": "filter",
        "paramId": "p_obj-371/p_obj-324/filter",
        "minimum": 0,
        "maximum": 4,
        "exponent": 1,
        "steps": 5,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "None",
          "LP",
          "HP",
          "BP",
          "Notch"
        ],
        "displayName": "Filter",
        "unit": "Type",
        "order": 6,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 56,
        "name": "regen",
        "paramId": "p_obj-371/p_obj-324/regen",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 50,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Regen",
        "unit": "%",
        "order": 5,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 57,
        "name": "fb",
        "paramId": "p_obj-371/p_obj-324/fb",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 1,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Feedback",
        "unit": "On/Off",
        "order": 4,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 58,
        "name": "freq",
        "paramId": "p_obj-371/p_obj-286/freq",
        "minimum": 0,
        "maximum": 100,
        "exponent": 1,
        "steps": 0,
        "initialValue": 30,
        "isEnum": false,
        "enumValues": [],
        "displayName": "Freq",
        "unit": "%",
        "order": 1,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 59,
        "name": "spread",
        "paramId": "p_obj-371/p_obj-286/spread",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "0",
          "1"
        ],
        "displayName": "Spread",
        "unit": "On/Off",
        "order": 3,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 60,
        "name": "mode",
        "paramId": "p_obj-371/p_obj-286/mode",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 2,
        "initialValue": 0,
        "isEnum": true,
        "enumValues": [
          "RM",
          "AM"
        ],
        "displayName": "Mode",
        "unit": "",
        "order": 2,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      }
    ],
    "numParameters": 61,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 2,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "transportUsed": true,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [
      {
        "tag": "toggle",
        "meta": ""
      },
      {
        "tag": "random_metro",
        "meta": ""
      },
      {
        "tag": "gogogo",
        "meta": ""
      },
      {
        "tag": "freq_shift",
        "meta": ""
      },
      {
        "tag": "rota_vibe_lfo",
        "meta": ""
      },
      {
        "tag": "tap-mult",
        "meta": ""
      },
      {
        "tag": "tap-tempo",
        "meta": ""
      },
      {
        "tag": "rate-ms",
        "meta": ""
      }
    ],
    "outports": [
      {
        "tag": "atten",
        "meta": ""
      },
      {
        "tag": "compens",
        "meta": ""
      }
    ],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      },
      {
        "type": "signal",
        "index": 2,
        "tag": "out2",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_56.getNumParameters())\r\n            return this.p_56.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_56.getNumParameters();\r\n\r\n        if (index < this.p_57.getNumParameters())\r\n            return this.p_57.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_57.getNumParameters();\r\n\r\n        if (index < this.p_58.getNumParameters())\r\n            return this.p_58.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_58.getNumParameters();\r\n\r\n        if (index < this.p_59.getNumParameters())\r\n            return this.p_59.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_59.getNumParameters();\r\n\r\n        if (index < this.p_60[0].getNumParameters()) {\r\n            {\r\n                return this.p_60[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_56.getNumParameters())\r\n            return this.p_56.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_56.getNumParameters();\r\n\r\n        if (index < this.p_57.getNumParameters())\r\n            return this.p_57.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_57.getNumParameters();\r\n\r\n        if (index < this.p_58.getNumParameters())\r\n            return this.p_58.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_58.getNumParameters();\r\n\r\n        if (index < this.p_59.getNumParameters())\r\n            return this.p_59.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_59.getNumParameters();\r\n\r\n        if (index < this.p_60[0].getNumParameters()) {\r\n            {\r\n                return this.p_60[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
      "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_56.getNumParameters() + this.p_57.getNumParameters() + this.p_58.getNumParameters() + this.p_59.getNumParameters() + this.p_60[0].getNumParameters();\r\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_56.getNumParameters())\r\n            return this.p_56.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_56.getNumParameters();\r\n\r\n        if (index < this.p_57.getNumParameters())\r\n            return this.p_57.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_57.getNumParameters();\r\n\r\n        if (index < this.p_58.getNumParameters())\r\n            return this.p_58.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_58.getNumParameters();\r\n\r\n        if (index < this.p_59.getNumParameters())\r\n            return this.p_59.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_59.getNumParameters();\r\n\r\n        if (index < this.p_60[0].getNumParameters()) {\r\n            {\r\n                return this.p_60[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
      "subpatches": {
        "p_56": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 3:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 2 ? 2 : value));\r\n            let normalizedValue = (value - 0) / (2 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 3);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n    case 4:\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n        {\r\n            value = (value < -100 ? -100 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - -100) / (100 - -100);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_01.getNumParameters();\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_02.getNumParameters();\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_03.getNumParameters();\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 3:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 3);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (2 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n    case 4:\r\n    case 5:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n        {\r\n            {\r\n                return -100 + value * (100 - -100);\r\n            }\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_01.getNumParameters();\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_02.getNumParameters();\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_03.getNumParameters();\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 6 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters() + this.p_04.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 2 ? 2 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 2 / 2;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_01.getNumParameters();\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_02.getNumParameters();\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_03.getNumParameters();\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_01": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_02": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_03": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_04": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_57": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n    case 5:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_05.getNumParameters())\r\n            return this.p_05.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_05.getNumParameters();\r\n\r\n        if (index < this.p_06.getNumParameters())\r\n            return this.p_06.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_06.getNumParameters();\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_07.getNumParameters();\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_08.getNumParameters();\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_09.getNumParameters();\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11.getNumParameters())\r\n            return this.p_11.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_11.getNumParameters();\r\n\r\n        if (index < this.p_12.getNumParameters())\r\n            return this.p_12.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n    case 5:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_05.getNumParameters())\r\n            return this.p_05.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_05.getNumParameters();\r\n\r\n        if (index < this.p_06.getNumParameters())\r\n            return this.p_06.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_06.getNumParameters();\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_07.getNumParameters();\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_08.getNumParameters();\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_09.getNumParameters();\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11.getNumParameters())\r\n            return this.p_11.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_11.getNumParameters();\r\n\r\n        if (index < this.p_12.getNumParameters())\r\n            return this.p_12.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 6 + this.p_05.getNumParameters() + this.p_06.getNumParameters() + this.p_07.getNumParameters() + this.p_08.getNumParameters() + this.p_09.getNumParameters() + this.p_10.getNumParameters() + this.p_11.getNumParameters() + this.p_12.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 6;\r\n\r\n        if (index < this.p_05.getNumParameters())\r\n            return this.p_05.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_05.getNumParameters();\r\n\r\n        if (index < this.p_06.getNumParameters())\r\n            return this.p_06.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_06.getNumParameters();\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_07.getNumParameters();\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_08.getNumParameters();\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_09.getNumParameters();\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11.getNumParameters())\r\n            return this.p_11.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_11.getNumParameters();\r\n\r\n        if (index < this.p_12.getNumParameters())\r\n            return this.p_12.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_05": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_06": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_07": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_08": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_09": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_10": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_11": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_12": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_58": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 1:\r\n    case 2:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 3;\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
          "subpatches": {},
          "isPolyphonic": false
        },
        "p_59": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n    case 5:\r\n    case 6:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_13.getNumParameters();\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_14.getNumParameters();\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_15.getNumParameters();\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_16.getNumParameters();\r\n\r\n        if (index < this.p_17.getNumParameters())\r\n            return this.p_17.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_17.getNumParameters();\r\n\r\n        if (index < this.p_18.getNumParameters())\r\n            return this.p_18.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_18.getNumParameters();\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n    case 5:\r\n    case 6:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_13.getNumParameters();\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_14.getNumParameters();\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_15.getNumParameters();\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_16.getNumParameters();\r\n\r\n        if (index < this.p_17.getNumParameters())\r\n            return this.p_17.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_17.getNumParameters();\r\n\r\n        if (index < this.p_18.getNumParameters())\r\n            return this.p_18.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_18.getNumParameters();\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 7 + this.p_13.getNumParameters() + this.p_14.getNumParameters() + this.p_15.getNumParameters() + this.p_16.getNumParameters() + this.p_17.getNumParameters() + this.p_18.getNumParameters() + this.p_19.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 7;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_13.getNumParameters();\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_14.getNumParameters();\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_15.getNumParameters();\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_16.getNumParameters();\r\n\r\n        if (index < this.p_17.getNumParameters())\r\n            return this.p_17.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_17.getNumParameters();\r\n\r\n        if (index < this.p_18.getNumParameters())\r\n            return this.p_18.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_18.getNumParameters();\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_13": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_14": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_15": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_16": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_17": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_18": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_19": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": false
        },
        "p_60": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_50.getNumParameters())\r\n            return this.p_50.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_50.getNumParameters();\r\n\r\n        if (index < this.p_51.getNumParameters())\r\n            return this.p_51.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_51.getNumParameters();\r\n\r\n        if (index < this.p_52.getNumParameters())\r\n            return this.p_52.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_52.getNumParameters();\r\n\r\n        if (index < this.p_53.getNumParameters())\r\n            return this.p_53.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_53.getNumParameters();\r\n\r\n        if (index < this.p_54.getNumParameters())\r\n            return this.p_54.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_54.getNumParameters();\r\n\r\n        if (index < this.p_55.getNumParameters())\r\n            return this.p_55.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_50.getNumParameters())\r\n            return this.p_50.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_50.getNumParameters();\r\n\r\n        if (index < this.p_51.getNumParameters())\r\n            return this.p_51.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_51.getNumParameters();\r\n\r\n        if (index < this.p_52.getNumParameters())\r\n            return this.p_52.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_52.getNumParameters();\r\n\r\n        if (index < this.p_53.getNumParameters())\r\n            return this.p_53.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_53.getNumParameters();\r\n\r\n        if (index < this.p_54.getNumParameters())\r\n            return this.p_54.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_54.getNumParameters();\r\n\r\n        if (index < this.p_55.getNumParameters())\r\n            return this.p_55.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_50.getNumParameters() + this.p_51.getNumParameters() + this.p_52.getNumParameters() + this.p_53.getNumParameters() + this.p_54.getNumParameters() + this.p_55.getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_50.getNumParameters())\r\n            return this.p_50.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_50.getNumParameters();\r\n\r\n        if (index < this.p_51.getNumParameters())\r\n            return this.p_51.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_51.getNumParameters();\r\n\r\n        if (index < this.p_52.getNumParameters())\r\n            return this.p_52.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_52.getNumParameters();\r\n\r\n        if (index < this.p_53.getNumParameters())\r\n            return this.p_53.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_53.getNumParameters();\r\n\r\n        if (index < this.p_54.getNumParameters())\r\n            return this.p_54.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_54.getNumParameters();\r\n\r\n        if (index < this.p_55.getNumParameters())\r\n            return this.p_55.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_50": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\r\n            let normalizedValue = (value - 0) / (4 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 6 ? 6 : value));\r\n            let normalizedValue = (value - 0) / (6 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 7);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n    case 3:\r\n    case 5:\r\n    case 8:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n    case 6:\r\n        {\r\n            value = (value < -100 ? -100 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - -100) / (100 - -100);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_24.getNumParameters())\r\n            return this.p_24.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_24.getNumParameters();\r\n\r\n        if (index < this.p_25.getNumParameters())\r\n            return this.p_25.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_25.getNumParameters();\r\n\r\n        if (index < this.p_26.getNumParameters())\r\n            return this.p_26.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_26.getNumParameters();\r\n\r\n        if (index < this.p_27.getNumParameters())\r\n            return this.p_27.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_27.getNumParameters();\r\n\r\n        if (index < this.p_28.getNumParameters())\r\n            return this.p_28.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_28.getNumParameters();\r\n\r\n        if (index < this.p_29.getNumParameters())\r\n            return this.p_29.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n    case 9:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 7:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (4 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 7);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (6 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n    case 3:\r\n    case 5:\r\n    case 8:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n    case 6:\r\n        {\r\n            {\r\n                return -100 + value * (100 - -100);\r\n            }\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_24.getNumParameters())\r\n            return this.p_24.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_24.getNumParameters();\r\n\r\n        if (index < this.p_25.getNumParameters())\r\n            return this.p_25.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_25.getNumParameters();\r\n\r\n        if (index < this.p_26.getNumParameters())\r\n            return this.p_26.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_26.getNumParameters();\r\n\r\n        if (index < this.p_27.getNumParameters())\r\n            return this.p_27.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_27.getNumParameters();\r\n\r\n        if (index < this.p_28.getNumParameters())\r\n            return this.p_28.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_28.getNumParameters();\r\n\r\n        if (index < this.p_29.getNumParameters())\r\n            return this.p_29.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 10 + this.p_24.getNumParameters() + this.p_25.getNumParameters() + this.p_26.getNumParameters() + this.p_27.getNumParameters() + this.p_28.getNumParameters() + this.p_29.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 6 ? 6 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 6 / 6;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 4 / 4;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 8:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 9:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_24.getNumParameters())\r\n            return this.p_24.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_24.getNumParameters();\r\n\r\n        if (index < this.p_25.getNumParameters())\r\n            return this.p_25.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_25.getNumParameters();\r\n\r\n        if (index < this.p_26.getNumParameters())\r\n            return this.p_26.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_26.getNumParameters();\r\n\r\n        if (index < this.p_27.getNumParameters())\r\n            return this.p_27.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_27.getNumParameters();\r\n\r\n        if (index < this.p_28.getNumParameters())\r\n            return this.p_28.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_28.getNumParameters();\r\n\r\n        if (index < this.p_29.getNumParameters())\r\n            return this.p_29.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_24": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_25": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_26": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_20.getNumParameters())\r\n            return this.p_20.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_20.getNumParameters();\r\n\r\n        if (index < this.p_21.getNumParameters())\r\n            return this.p_21.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_21.getNumParameters();\r\n\r\n        if (index < this.p_22.getNumParameters())\r\n            return this.p_22.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_22.getNumParameters();\r\n\r\n        if (index < this.p_23.getNumParameters())\r\n            return this.p_23.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_20.getNumParameters())\r\n            return this.p_20.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_20.getNumParameters();\r\n\r\n        if (index < this.p_21.getNumParameters())\r\n            return this.p_21.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_21.getNumParameters();\r\n\r\n        if (index < this.p_22.getNumParameters())\r\n            return this.p_22.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_22.getNumParameters();\r\n\r\n        if (index < this.p_23.getNumParameters())\r\n            return this.p_23.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_20.getNumParameters() + this.p_21.getNumParameters() + this.p_22.getNumParameters() + this.p_23.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_20.getNumParameters())\r\n            return this.p_20.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_20.getNumParameters();\r\n\r\n        if (index < this.p_21.getNumParameters())\r\n            return this.p_21.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_21.getNumParameters();\r\n\r\n        if (index < this.p_22.getNumParameters())\r\n            return this.p_22.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_22.getNumParameters();\r\n\r\n        if (index < this.p_23.getNumParameters())\r\n            return this.p_23.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_20": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_21": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_22": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_23": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_27": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_28": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_29": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_51": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 1:\r\n    case 2:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 3;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_52": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\r\n            let normalizedValue = (value - 0) / (4 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 6 ? 6 : value));\r\n            let normalizedValue = (value - 0) / (6 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 7);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n    case 3:\r\n    case 5:\r\n    case 8:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n    case 6:\r\n        {\r\n            value = (value < -100 ? -100 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - -100) / (100 - -100);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_34.getNumParameters())\r\n            return this.p_34.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_34.getNumParameters();\r\n\r\n        if (index < this.p_35.getNumParameters())\r\n            return this.p_35.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_35.getNumParameters();\r\n\r\n        if (index < this.p_36.getNumParameters())\r\n            return this.p_36.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_36.getNumParameters();\r\n\r\n        if (index < this.p_37.getNumParameters())\r\n            return this.p_37.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_37.getNumParameters();\r\n\r\n        if (index < this.p_38.getNumParameters())\r\n            return this.p_38.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_38.getNumParameters();\r\n\r\n        if (index < this.p_39.getNumParameters())\r\n            return this.p_39.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n    case 9:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 7:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (4 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 7);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (6 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n    case 3:\r\n    case 5:\r\n    case 8:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n    case 6:\r\n        {\r\n            {\r\n                return -100 + value * (100 - -100);\r\n            }\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_34.getNumParameters())\r\n            return this.p_34.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_34.getNumParameters();\r\n\r\n        if (index < this.p_35.getNumParameters())\r\n            return this.p_35.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_35.getNumParameters();\r\n\r\n        if (index < this.p_36.getNumParameters())\r\n            return this.p_36.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_36.getNumParameters();\r\n\r\n        if (index < this.p_37.getNumParameters())\r\n            return this.p_37.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_37.getNumParameters();\r\n\r\n        if (index < this.p_38.getNumParameters())\r\n            return this.p_38.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_38.getNumParameters();\r\n\r\n        if (index < this.p_39.getNumParameters())\r\n            return this.p_39.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 10 + this.p_34.getNumParameters() + this.p_35.getNumParameters() + this.p_36.getNumParameters() + this.p_37.getNumParameters() + this.p_38.getNumParameters() + this.p_39.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 6 ? 6 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 6 / 6;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 4 / 4;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 8:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 9:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_34.getNumParameters())\r\n            return this.p_34.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_34.getNumParameters();\r\n\r\n        if (index < this.p_35.getNumParameters())\r\n            return this.p_35.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_35.getNumParameters();\r\n\r\n        if (index < this.p_36.getNumParameters())\r\n            return this.p_36.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_36.getNumParameters();\r\n\r\n        if (index < this.p_37.getNumParameters())\r\n            return this.p_37.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_37.getNumParameters();\r\n\r\n        if (index < this.p_38.getNumParameters())\r\n            return this.p_38.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_38.getNumParameters();\r\n\r\n        if (index < this.p_39.getNumParameters())\r\n            return this.p_39.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_34": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_35": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_36": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_30.getNumParameters())\r\n            return this.p_30.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_30.getNumParameters();\r\n\r\n        if (index < this.p_31.getNumParameters())\r\n            return this.p_31.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_31.getNumParameters();\r\n\r\n        if (index < this.p_32.getNumParameters())\r\n            return this.p_32.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_32.getNumParameters();\r\n\r\n        if (index < this.p_33.getNumParameters())\r\n            return this.p_33.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_30.getNumParameters())\r\n            return this.p_30.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_30.getNumParameters();\r\n\r\n        if (index < this.p_31.getNumParameters())\r\n            return this.p_31.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_31.getNumParameters();\r\n\r\n        if (index < this.p_32.getNumParameters())\r\n            return this.p_32.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_32.getNumParameters();\r\n\r\n        if (index < this.p_33.getNumParameters())\r\n            return this.p_33.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_30.getNumParameters() + this.p_31.getNumParameters() + this.p_32.getNumParameters() + this.p_33.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_30.getNumParameters())\r\n            return this.p_30.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_30.getNumParameters();\r\n\r\n        if (index < this.p_31.getNumParameters())\r\n            return this.p_31.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_31.getNumParameters();\r\n\r\n        if (index < this.p_32.getNumParameters())\r\n            return this.p_32.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_32.getNumParameters();\r\n\r\n        if (index < this.p_33.getNumParameters())\r\n            return this.p_33.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_30": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_31": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_32": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_33": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_37": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_38": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_39": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_53": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 1:\r\n    case 2:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 3;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            },
            "p_54": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n    case 9:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 7:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 4 ? 4 : value));\r\n            let normalizedValue = (value - 0) / (4 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 5);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 6 ? 6 : value));\r\n            let normalizedValue = (value - 0) / (6 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 7);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 1:\r\n    case 3:\r\n    case 5:\r\n    case 8:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    case 4:\r\n    case 6:\r\n        {\r\n            value = (value < -100 ? -100 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - -100) / (100 - -100);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_44.getNumParameters())\r\n            return this.p_44.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_44.getNumParameters();\r\n\r\n        if (index < this.p_45.getNumParameters())\r\n            return this.p_45.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_45.getNumParameters();\r\n\r\n        if (index < this.p_46.getNumParameters())\r\n            return this.p_46.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_46.getNumParameters();\r\n\r\n        if (index < this.p_47.getNumParameters())\r\n            return this.p_47.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_47.getNumParameters();\r\n\r\n        if (index < this.p_48.getNumParameters())\r\n            return this.p_48.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_48.getNumParameters();\r\n\r\n        if (index < this.p_49.getNumParameters())\r\n            return this.p_49.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n    case 9:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 7:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 5);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (4 - 0);\r\n            }\r\n        }\r\n    case 2:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 7);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (6 - 0);\r\n            }\r\n        }\r\n    case 1:\r\n    case 3:\r\n    case 5:\r\n    case 8:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    case 4:\r\n    case 6:\r\n        {\r\n            {\r\n                return -100 + value * (100 - -100);\r\n            }\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_44.getNumParameters())\r\n            return this.p_44.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_44.getNumParameters();\r\n\r\n        if (index < this.p_45.getNumParameters())\r\n            return this.p_45.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_45.getNumParameters();\r\n\r\n        if (index < this.p_46.getNumParameters())\r\n            return this.p_46.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_46.getNumParameters();\r\n\r\n        if (index < this.p_47.getNumParameters())\r\n            return this.p_47.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_47.getNumParameters();\r\n\r\n        if (index < this.p_48.getNumParameters())\r\n            return this.p_48.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_48.getNumParameters();\r\n\r\n        if (index < this.p_49.getNumParameters())\r\n            return this.p_49.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 10 + this.p_44.getNumParameters() + this.p_45.getNumParameters() + this.p_46.getNumParameters() + this.p_47.getNumParameters() + this.p_48.getNumParameters() + this.p_49.getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 6 ? 6 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 6 / 6;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 3:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 4:\r\n        {\r\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\r\n            return v;\r\n        }\r\n    case 5:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 6:\r\n        {\r\n            v = (v > 100 ? 100 : (v < -100 ? -100 : v));\r\n            return v;\r\n        }\r\n    case 7:\r\n        {\r\n            v = (v > 4 ? 4 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 4 / 4;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 8:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 9:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 10;\r\n\r\n        if (index < this.p_44.getNumParameters())\r\n            return this.p_44.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_44.getNumParameters();\r\n\r\n        if (index < this.p_45.getNumParameters())\r\n            return this.p_45.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_45.getNumParameters();\r\n\r\n        if (index < this.p_46.getNumParameters())\r\n            return this.p_46.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_46.getNumParameters();\r\n\r\n        if (index < this.p_47.getNumParameters())\r\n            return this.p_47.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_47.getNumParameters();\r\n\r\n        if (index < this.p_48.getNumParameters())\r\n            return this.p_48.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_48.getNumParameters();\r\n\r\n        if (index < this.p_49.getNumParameters())\r\n            return this.p_49.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_44": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_45": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_46": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_40.getNumParameters())\r\n            return this.p_40.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_40.getNumParameters();\r\n\r\n        if (index < this.p_41.getNumParameters())\r\n            return this.p_41.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_41.getNumParameters();\r\n\r\n        if (index < this.p_42.getNumParameters())\r\n            return this.p_42.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_42.getNumParameters();\r\n\r\n        if (index < this.p_43.getNumParameters())\r\n            return this.p_43.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_40.getNumParameters())\r\n            return this.p_40.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_40.getNumParameters();\r\n\r\n        if (index < this.p_41.getNumParameters())\r\n            return this.p_41.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_41.getNumParameters();\r\n\r\n        if (index < this.p_42.getNumParameters())\r\n            return this.p_42.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_42.getNumParameters();\r\n\r\n        if (index < this.p_43.getNumParameters())\r\n            return this.p_43.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0 + this.p_40.getNumParameters() + this.p_41.getNumParameters() + this.p_42.getNumParameters() + this.p_43.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        index -= 0;\r\n\r\n        if (index < this.p_40.getNumParameters())\r\n            return this.p_40.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_40.getNumParameters();\r\n\r\n        if (index < this.p_41.getNumParameters())\r\n            return this.p_41.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_41.getNumParameters();\r\n\r\n        if (index < this.p_42.getNumParameters())\r\n            return this.p_42.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_42.getNumParameters();\r\n\r\n        if (index < this.p_43.getNumParameters())\r\n            return this.p_43.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_40": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_41": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_42": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    },
                    "p_43": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_47": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_48": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                },
                "p_49": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 0;\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    default:\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {},
                  "isPolyphonic": false
                }
              },
              "isPolyphonic": false
            },
            "p_55": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n\r\n            {\r\n                normalizedValue = this.applyStepsToNormalizedParameterValue(normalizedValue, 2);\r\n            }\r\n\r\n            return normalizedValue;\r\n        }\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 100 ? 100 : value));\r\n            let normalizedValue = (value - 0) / (100 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 1:\r\n    case 2:\r\n        {\r\n            {\r\n                value = this.applyStepsToNormalizedParameterValue(value, 2);\r\n            }\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    case 0:\r\n        {\r\n            {\r\n                return 0 + value * (100 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 3;\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 100 ? 100 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n\r\n            {\r\n                const oneStep = 1 / 1;\r\n                const oneStepInv = (oneStep != 0 ? 1 / oneStep : 0);\r\n                const numberOfSteps = rnbo_fround(v * oneStepInv * 1 / 1) * 1;\r\n                v = numberOfSteps * oneStep;\r\n            }\r\n\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
              "subpatches": {},
              "isPolyphonic": false
            }
          },
          "isPolyphonic": true
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "Crossing_3.maxpat",
      "rnboobjname": "rnbomatic",
      "maxversion": "9.0.3",
      "rnboversion": "1.3.3",
      "name": "L"
    }
  },
  "presets": [
    {
      "name": "L",
      "preset": {
        "__sps": {
          "p_obj-130": {
            "__sps": {
              "Compensation~": {},
              "Compression~": {},
              "Lookahead~": {},
              "Volume&Clip~": {}
            },
            "attack": {
              "value": 25
            },
            "comp": {
              "value": 40
            },
            "lookahead": {
              "value": 1
            },
            "softclip": {
              "value": 1
            },
            "sustain": {
              "value": 25
            },
            "volume": {
              "value": 0
            }
          },
          "p_obj-17": {
            "AM": {
              "value": 20
            },
            "__sps": {
              "Drive~": {},
              "Lowpass~": {},
              "Mix~": {},
              "Oct1~": {},
              "Oct2~": {},
              "Rect~": {},
              "Tone~": {}
            },
            "drive": {
              "value": 25
            },
            "mix": {
              "value": 50
            },
            "octave1": {
              "value": 70
            },
            "octave2": {
              "value": 70
            },
            "rectified": {
              "value": 0
            },
            "tone": {
              "value": 50
            }
          },
          "p_obj-32": {
            "freq": {
              "value": 100
            },
            "mode": {
              "value": 0
            },
            "spread": {
              "value": 0
            }
          },
          "p_obj-371": [
            {
              "__sps": {
                "p_obj-192": {
                  "freq": {
                    "value": 6
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-193": {
                  "freq": {
                    "value": 5
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-286": {
                  "freq": {
                    "value": 10
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-321": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 40
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-323": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 20
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-324": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 33
                  },
                  "volume": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "p_obj-192": {
                  "freq": {
                    "value": 6
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-193": {
                  "freq": {
                    "value": 5
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-286": {
                  "freq": {
                    "value": 10
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-321": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 40
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-323": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 20
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-324": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 33
                  },
                  "volume": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "p_obj-192": {
                  "freq": {
                    "value": 6
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-193": {
                  "freq": {
                    "value": 5
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-286": {
                  "freq": {
                    "value": 10
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-321": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 40
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-323": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 20
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-324": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 33
                  },
                  "volume": {
                    "value": 0
                  }
                }
              }
            }
          ],
          "p_obj-8": {
            "__sps": {
              "Blur~": {},
              "CombL~": {},
              "CombR~": {},
              "Damp~": {},
              "Mix~": {},
              "RoomA~": {},
              "RoomB~": {},
              "Shuffle~": {}
            },
            "damp": {
              "value": 50
            },
            "decay": {
              "value": 50
            },
            "diff": {
              "value": 50
            },
            "jitter": {
              "value": 50
            },
            "mix": {
              "value": 50
            },
            "size": {
              "value": 100
            }
          }
        }
      }
    },
    {
      "name": "L",
      "preset": {
        "__sps": {
          "p_obj-130": {
            "__sps": {
              "Compensation~": {},
              "Compression~": {},
              "Lookahead~": {},
              "Volume&Clip~": {}
            },
            "attack": {
              "value": 25
            },
            "comp": {
              "value": 40
            },
            "lookahead": {
              "value": 1
            },
            "softclip": {
              "value": 1
            },
            "sustain": {
              "value": 25
            },
            "volume": {
              "value": 0
            }
          },
          "p_obj-17": {
            "AM": {
              "value": 20
            },
            "__sps": {
              "Drive~": {},
              "Lowpass~": {},
              "Mix~": {},
              "Oct1~": {},
              "Oct2~": {},
              "Rect~": {},
              "Tone~": {}
            },
            "drive": {
              "value": 25
            },
            "mix": {
              "value": 50
            },
            "octave1": {
              "value": 70
            },
            "octave2": {
              "value": 70
            },
            "rectified": {
              "value": 0
            },
            "tone": {
              "value": 50
            }
          },
          "p_obj-32": {
            "freq": {
              "value": 100
            },
            "mode": {
              "value": 0
            },
            "spread": {
              "value": 0
            }
          },
          "p_obj-35": {
            "attack": {
              "value": 1.5
            },
            "gain": {
              "value": 0
            },
            "lookahead": {
              "value": 1.5
            },
            "release": {
              "value": 300
            },
            "thresh": {
              "value": -0.3
            }
          },
          "p_obj-371": [
            {
              "__sps": {
                "p_obj-192": {
                  "freq": {
                    "value": 6
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-193": {
                  "freq": {
                    "value": 5
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-286": {
                  "freq": {
                    "value": 10
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-298": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 40
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-299": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-303": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-304": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 40
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-316": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-317": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 20
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-321": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 40
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-323": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 20
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-324": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 33
                  },
                  "volume": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "p_obj-192": {
                  "freq": {
                    "value": 6
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-193": {
                  "freq": {
                    "value": 5
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-286": {
                  "freq": {
                    "value": 10
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-298": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 40
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-299": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-303": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-304": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 40
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-316": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-317": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 20
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-321": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 40
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-323": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 20
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-324": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 33
                  },
                  "volume": {
                    "value": 0
                  }
                }
              }
            },
            {
              "__sps": {
                "p_obj-192": {
                  "freq": {
                    "value": 6
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-193": {
                  "freq": {
                    "value": 5
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-286": {
                  "freq": {
                    "value": 10
                  },
                  "mode": {
                    "value": 0
                  },
                  "spread": {
                    "value": 0
                  }
                },
                "p_obj-298": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 40
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-299": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-303": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-304": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 40
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-316": {
                  "__sps": {
                    "Balance~": {},
                    "Color~": {},
                    "DriveHigh~": {},
                    "DriveLow~": {},
                    "FlangingHigh~": {},
                    "FlangingLow~": {},
                    "LFO~": {},
                    "Mix~": {},
                    "PhasingHigh~": {},
                    "PhasingLow~": {},
                    "RotationHigh~": {},
                    "RotationLow~": {},
                    "TapTempo": {},
                    "Xover~": {}
                  },
                  "balance": {
                    "value": 0
                  },
                  "color": {
                    "value": 0
                  },
                  "drivehigh": {
                    "value": 0
                  },
                  "drivelow": {
                    "value": 0
                  },
                  "flanging": {
                    "value": 50
                  },
                  "mix": {
                    "value": 100
                  },
                  "panhigh": {
                    "value": 50
                  },
                  "panlow": {
                    "value": 50
                  },
                  "phasing": {
                    "value": 0
                  },
                  "rate": {
                    "value": 25
                  },
                  "ratehigh": {
                    "value": 2
                  },
                  "ratelow": {
                    "value": 2
                  },
                  "xover": {
                    "value": 50
                  }
                },
                "p_obj-317": {
                  "__sps": {
                    "Compensation~": {},
                    "Compression~": {},
                    "Lookahead~": {},
                    "Volume&Clip~": {}
                  },
                  "attack": {
                    "value": 25
                  },
                  "comp": {
                    "value": 20
                  },
                  "lookahead": {
                    "value": 1
                  },
                  "softclip": {
                    "value": 0
                  },
                  "sustain": {
                    "value": 25
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-321": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 40
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-323": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 20
                  },
                  "volume": {
                    "value": 0
                  }
                },
                "p_obj-324": {
                  "__sps": {
                    "DelayCalc": {},
                    "FilterDelay~": {
                      "__sps": {
                        "Filter~": {},
                        "Filter~[1]": {},
                        "Filter~[2]": {},
                        "Filter~[3]": {}
                      }
                    },
                    "Input~": {},
                    "Mix~": {},
                    "TapTempo": {},
                    "Volume~": {}
                  },
                  "color": {
                    "value": 50
                  },
                  "fb": {
                    "value": 1
                  },
                  "filter": {
                    "value": 0
                  },
                  "input": {
                    "value": 1
                  },
                  "mix": {
                    "value": 50
                  },
                  "regen": {
                    "value": 50
                  },
                  "scale": {
                    "value": 3
                  },
                  "spread": {
                    "value": 0
                  },
                  "time": {
                    "value": 33
                  },
                  "volume": {
                    "value": 0
                  }
                }
              }
            }
          ],
          "p_obj-8": {
            "__sps": {
              "Blur~": {},
              "CombL~": {},
              "CombR~": {},
              "Damp~": {},
              "Mix~": {},
              "RoomA~": {},
              "RoomB~": {},
              "Shuffle~": {}
            },
            "damp": {
              "value": 50
            },
            "decay": {
              "value": 50
            },
            "diff": {
              "value": 50
            },
            "jitter": {
              "value": 50
            },
            "mix": {
              "value": 50
            },
            "size": {
              "value": 50
            }
          },
          "p_obj-91": {
            "__sps": {
              "Balance~": {},
              "Color~": {},
              "DriveHigh~": {},
              "DriveLow~": {},
              "FlangingHigh~": {},
              "FlangingLow~": {},
              "LFO~": {},
              "Mix~": {},
              "PhasingHigh~": {},
              "PhasingLow~": {},
              "RotationHigh~": {},
              "RotationLow~": {},
              "TapTempo": {},
              "Xover~": {}
            },
            "balance": {
              "value": 0
            },
            "color": {
              "value": 0
            },
            "drivehigh": {
              "value": 0
            },
            "drivelow": {
              "value": 0
            },
            "flanging": {
              "value": 50
            },
            "mix": {
              "value": 100
            },
            "panhigh": {
              "value": 50
            },
            "panlow": {
              "value": 50
            },
            "phasing": {
              "value": 0
            },
            "rate": {
              "value": 25
            },
            "ratehigh": {
              "value": 2
            },
            "ratelow": {
              "value": 2
            },
            "xover": {
              "value": 50
            }
          },
          "platereverb": {}
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}